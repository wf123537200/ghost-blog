var clone = require('./');

function inspect(obj) {
  seen = [];
  return JSON.stringify(obj, function (key, val) {
    if (val != null && typeof val == "object") {
      if (seen.indexOf(val) >= 0) {
        return '[cyclic]';
      }

      seen.push(val);
    }

    return val;
  });
}

// Creates a new VM in node, or an iframe in a browser in order to run the
// script
function apartContext(context, script, callback) {
  var vm = require('vm');

  if (vm) {
    var ctx = vm.createContext({ ctx: context });
    callback(vm.runInContext(script, ctx));
  } else if (document && document.createElement) {
    var iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);

    var myCtxId = 'tmpCtx' + Math.random();

    window[myCtxId] = context;
    iframe.src = 'test-apart-ctx.html?' + myCtxId + '&' + encodeURIComponent(script);
    iframe.onload = function() {
      try {
        callback(iframe.contentWindow.results);
      } catch (e) {
        throw e;
      }
    };
  } else {
    console.log('WARNING: cannot create an apart context.');
  }
}

exports["clone string"] = function (test) {
  test.expect(2); // how many tests?

  var a = "foo";
  test.strictEqual(clone(a), a);
  a = "";
  test.strictEqual(clone(a), a);

  test.done();
};

exports["clone number"] = function (test) {
  test.expect(5); // how many tests?

  var a = 0;
  test.strictEqual(clone(a), a);
  a = 1;
  test.strictEqual(clone(a), a);
  a = -1000;
  test.strictEqual(clone(a), a);
  a = 3.1415927;
  test.strictEqual(clone(a), a);
  a = -3.1415927;
  test.strictEqual(clone(a), a);

  test.done();
};

exports["clone date"] = function (test) {
  test.expect(3); // how many tests?

  var a = new Date;
  var c = clone(a);
  test.ok(!!a.getUTCDate && !!a.toUTCString);
  test.ok(!!c.getUTCDate && !!c.toUTCString);
  test.equal(a.getTime(), c.getTime());

  test.done();
};

exports["clone object"] = function (test) {
  test.expect(1); // how many tests?

  var a = { foo: { bar: "baz" } };
  var b = clone(a);

  test.deepEqual(b, a);

  test.done();
};

exports["clone array"] = function (test) {
  test.expect(2); // how many tests?

  var a = [
    { foo: "bar" },
    "baz"
  ];
  var b = clone(a);

  test.ok(b instanceof Array);
  test.deepEqual(b, a);

  test.done();
};

exports["clone buffer"] = function (test) {
  if (typeof Buffer == 'undefined') {
    return test.done();
  }

  test.expect(1);

  var a = new Buffer("this is a test buffer");
  var b = clone(a);

  // no underscore equal sinc